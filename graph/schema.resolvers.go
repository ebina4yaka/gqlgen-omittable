package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"fmt"

	"github.com/ebina4yaka/gqlgen-omittable/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.UpdateUserPayload, error) {
	touched := []string{"id"}

	if input.Name.IsSet() {
		touched = append(touched, "name")
	}

	profile, profileIsSet := input.Profile.ValueOK()

	if profileIsSet {
		touched = append(touched, "profile")

		if profile != nil {
			if profile.Bio.IsSet() {
				touched = append(touched, "profile.bio")
			}

			address, addressIsSet := profile.Address.ValueOK()

			if addressIsSet {
				touched = append(touched, "profile.address")

				if address != nil {
					if address.City.IsSet() {
						touched = append(touched, "profile.address.city")
					}

					if address.Prefecture.IsSet() {
						touched = append(touched, "profile.address.prefecture")
					}

					if address.PostCode.IsSet() {
						touched = append(touched, "profile.address.postcode")
					}
				}
			}
		}
	}

	return &model.UpdateUserPayload{TouchedField: touched}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
